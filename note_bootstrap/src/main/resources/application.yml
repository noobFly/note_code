#logging.level.root: DEBUG
logging.level:
  org.springframework: DEBUG


server:
    shutdown: graceful #优雅停机
    port: 8080
    tomcat:
      uri-encoding: UTF-8
      threads:
        max: 100
        min-spare: 10
      remoteip.protocol-header: X-Forwarded-Proto
    servlet:
      encoding:
        charset: UTF-8
        force: true
        enabled: true
      context-path: /noob

spring.cloud.bus.trace.enabled: true

spring.profiles.active: dev

test.value: testVal

# 开启监控接口
management:
  endpoints:
    web:
      exposure:
        include: "*"
        #include: refresh,health,info #打开部分

spring:
  servlet:
    multipart.file-size-threshold: 0 #文件写入磁盘的阈值
    multipart.max-file-size: 100MB # 最大文件大小
    multipart.max-request-size: 200MB
  lifecycle:
    timeout-per-shutdown-phase: 20s #默认30s 在规定时间内如果线程无法执行完毕则会被强制停机 配合优雅停机使用 一定不要使用kill -9 (不会触发ShutdownHook)，使用kill -2 来关闭容器
 # 数据源配置 com.noob.dataSourceRouter.DruidProperties \ org.springframework.boot.autoconfigure.jdbc.DataSourcePropertie\ com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #mysql driver
    driverClassName: com.mysql.cj.jdbc.Driver
    druid:
      publicKey: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANYB1tSGKuT2wbMwE4CLOwPIMAg0gYj+oaemsMHcA8uS2sZU8MozSWWVPT93A6/YuH8/ltTrJfnKeOcCAwEAAQ==
      # 主库数据源
      master:
        #mysql url
        url: jdbc:mysql://127.0.0.1:63306/noob_test?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&autoReconnect=true&tinyInt1isBit=true
        username: noob_test
        password: 1DF1e7CEyDUKFXXJ9aNNnlcoIB+BdAzlu73wA7pOe2NZ+q9/EIZ/sX/Th+DG87Hqw==
      # 从库数据源
      slave:
        # 从数据源开关/默认关闭
        enabled: false
        url:
        username:
        password:
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间(单位：毫秒)
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql
      validationQuery: SELECT 1 # FROM DUAL
       # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      testWhileIdle: true
      # 默认是false. 如果为true，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      testOnBorrow: false
      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
      testOnReturn: false
      # Spring 监控，利用aop 对指定接口的执行时间，jdbc数进行记录
      aop-patterns: "com.noob.template.dao.*"
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" # 排除一些不必要的url
        # 控制台管理用户名和密码
        login-username: admin
        login-password: 123456
      filter:       ########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL）##########
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
        # 日志监控，使用slf4j 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      stat-view-servlet:
        enabled: true                   # 启用StatViewServlet
        url-pattern: /druid/*           # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        reset-enable: false              # 不允许清空统计数据,重新计算
        login-username: root            # 配置监控页面访问密码
        login-password: 123
        allow: 127.0.0.1           # 允许访问的地址，如果allow没有配置或者为空，则允许所有访问
        deny:                                        # 拒绝访问的地址，deny优先于allow
  # redis 配置
  redis:
    # 地址
    host: 100.98.0.200
    # 端口，默认为6379
    port: 20007
    # 数据库索引
    database: 0
    # 密码
    auth: utrust
    password: utrust
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        #连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
  cache: #非标准配置参数
    expires: #缓存有效时间，格式为缓存名: 时间（S），使用有效时间可以减少僵尸缓存
      SysConfig: 86400 #24小时
      SysDict: 86400
      RepeatSubmit: 2 #两秒
      CaptchaCode: 120 #两分钟
      ChallegeToken: 60 #一分钟

# MyBatis配置
mybatis:
    # 搜索指定包别名
    typeAliasesPackage: com.noob.**.domain
    # 配置mapper的扫描，找到所有的mapper.xml映射文件
    mapperLocations: classpath*:mapper/**/*Mapper.xml
    # 加载全局的配置文件
    configLocation: classpath:mybatis/mybatis-config.xml


spring.datasource:
    url: jdbc:mysql://${dburl:rdsmp1l3waaw0jhvw9nehpublic.mysql.rds.aliyuncs.com:3306/trusts}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
    username: ${dbuser:yctest}
    password: ${dbpwd:erongdu}
    driverClassName: com.mysql.cj.jdbc.Driver
    poolName: SpringBootHikariCP
    maximumPoolSize: 5
    minimumIdle: 3
    connectionTimeout: 30000
    idleTimeout: 30000
    pool-prepared-statements: true
    max-open-prepared-statements: 250
    
spring.shardingsphere:
    enabled: true
    props.sql.show: true
    datasource:
        names: ds0
        ds0:
            type: com.noob.shardingJdbc.dataSoure.CustomizeHikariDataSource
            driver-class-name: com.mysql.cj.jdbc.Driver
            jdbc-url: jdbc:mysql://${cbms.dburl}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8&autoReconnect=true&failOverReadOnly=false
            username: ${cbms.dbuser}
            password: ${cbms.dbpwd}
            data-source-properties: #下面子属性只能为小驼峰格式，同使用数据源中的配置属性
              maximumPoolSize: ${datasource.maximumPoolSize}
              minimumIdle: ${datasource.minimumIdle}
              maxLifetime: 300000
              connectionTimeout: 30000
              idleTimeout: 30000
              connectionTestQuery: SELECT 1
    sharding.tables:
        channel_invoke_log:
            actual-data-nodes: ds0.channel_invoke_log_0$->{0..9},ds0.channel_invoke_log_$->{10..31}
            table-strategy.standard.sharding-column: flow_no
            table-strategy.standard.precise-algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashShardingAlgorithm
        customer:
            actual-data-nodes: ds0.customer_0$->{0..9},ds0.customer_$->{10..31}
            table-strategy.standard.sharding-column: certificate_no
            table-strategy.standard.precise-algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashShardingAlgorithm
        bank_account:
            actual-data-nodes: ds0.bank_account_0$->{0..9},ds0.bank_account_$->{10..31}
            table-strategy.standard.sharding-column: certificate_no
            table-strategy.standard.precise-algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashShardingAlgorithm
        trade_log:
            actual-data-nodes: ds0.trade_log_0$->{0..9},ds0.trade_log_$->{10..31}
            table-strategy.standard.sharding-column: trade_no
            table-strategy.standard.precise-algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashShardingAlgorithm
        apply_limit:
            actual-data-nodes: ds0.apply_limit_0$->{0..9},ds0.apply_limit_$->{10..31}
            table-strategy.standard.sharding-column: contract_no
            table-strategy.standard.precise-algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashFeatureCodeShardingAlgorithm
        limit_use:
            actual-data-nodes: ds0.limit_use_0$->{0..9},ds0.limit_use_$->{10..31}
            table-strategy.complex.sharding-columns: loan_no,contract_no
            table-strategy.complex.algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashFeatureCodeComplexShardingAlgorithm
        settle_repayment:
            actual-data-nodes: ds0.settle_repayment_0$->{0..9},ds0.settle_repayment_$->{10..31}
            table-strategy.standard.sharding-column: loan_no
            table-strategy.standard.precise-algorithm-class-name: cn.utrust.fintech.cbms.algorithm.sharding.MurmurConsistentHashFeatureCodeShardingAlgorithm
    sharding.bindingTables: 
        - limit_use, repayment_plan, loan, settle_detail
        - customer, bank_account, repayment_deduct,settle_repayment    

xxl:
  job:
    admin:
      ### xxl-job admin address list：调度中心部署跟地址：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"。
      addresses: http://39.108.151.172:8088/xxl-job-admin-1.9.1
    executor:
      ### xxl-job executor address：执行器"AppName"和地址信息配置：AppName执行器心跳注册分组依据；地址信息用于"调度中心请求并触发任务"和"执行器注册"。
      ### 执行器默认端口为9999，执行器IP默认为空表示自动获取IP，多网卡时可手动设置指定IP，手动设置IP时将会绑定Host。单机部署多个执行器时，注意要配置不同执行器端口；
      appName: trusts-core-yc
      ip:
      port:
      ### xxl-job log path：执行器运行日志文件存储的磁盘位置，需要对该路径拥有读写权限
      logPath: ./xxl-job/jobHandler
      ### xxl-job log retention days：执行器Log文件定期清理功能，指定日志保存天数，日志文件过期自动删除。限制至少保持3天，否则功能不生效；
      logRetentionDays: 3
    ### xxl-job, access token：执行器通讯TOKEN，非空时启用
    accessToken:    
    
    #WeBase 区块链    
webase: 
   transactionUrl: http://100.98.1.107:5002/trans/handleWithSign
   groupId:  1
   userAdderss: '0x6149e71ffabb0fd80d659aaa1d852e967c2820a4' #不加引号会当作16进制处理
   contractAddressMap:
              TrustAssetContract: 
                       contractAddress: '0x89e40c3419922856b93723eba945e79473af21f6' #不加引号会当作16进制处理
                       contractName: AssetContract
                       contractAbi: "[{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"string\"},{\"name\":\"assetJson\",\"type\":\"string\"}],\"name\":\"storeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"string\"}],\"name\":\"queryAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"string\"}],\"name\":\"queryAssetHisotry\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"
                       useCns: false
    